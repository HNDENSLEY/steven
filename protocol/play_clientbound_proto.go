// Generated by protocol_builder
// Do not edit

package protocol

import (
	"bytes"
	"encoding/json"
)

func (k *KeepAliveClientbound) id() int { return 0 }
func (k *KeepAliveClientbound) write(ww *bytes.Buffer) (err error) {
	if err = writeVarInt(ww, k.ID); err != nil {
		return err
	}
	return
}
func (k *KeepAliveClientbound) read(rr *bytes.Reader) (err error) {
	if k.ID, err = readVarInt(rr); err != nil {
		return err
	}
	return
}

func (j *JoinGame) id() int { return 1 }
func (j *JoinGame) write(ww *bytes.Buffer) (err error) {
	var tmp [4]byte
	tmp[0] = byte(j.EntityID >> 24)
	tmp[1] = byte(j.EntityID >> 16)
	tmp[2] = byte(j.EntityID >> 8)
	tmp[3] = byte(j.EntityID >> 0)
	if _, err = ww.Write(tmp[:4]); err != nil {
		return
	}
	tmp[0] = byte(j.Gamemode >> 0)
	if _, err = ww.Write(tmp[:1]); err != nil {
		return
	}
	tmp[0] = byte(j.Dimension >> 0)
	if _, err = ww.Write(tmp[:1]); err != nil {
		return
	}
	tmp[0] = byte(j.Difficulty >> 0)
	if _, err = ww.Write(tmp[:1]); err != nil {
		return
	}
	tmp[0] = byte(j.MaxPlayers >> 0)
	if _, err = ww.Write(tmp[:1]); err != nil {
		return
	}
	if err = writeString(ww, j.LevelType); err != nil {
		return err
	}
	if err = writeBool(ww, j.ReducedDebugInfo); err != nil {
		return err
	}
	return
}
func (j *JoinGame) read(rr *bytes.Reader) (err error) {
	var tmp [4]byte
	if _, err = rr.Read(tmp[:4]); err != nil {
		return err
	}
	j.EntityID = int32((uint32(tmp[3]) << 0) | (uint32(tmp[2]) << 8) | (uint32(tmp[1]) << 16) | (uint32(tmp[0]) << 24))
	if _, err = rr.Read(tmp[:1]); err != nil {
		return err
	}
	j.Gamemode = (byte(tmp[0]) << 0)
	if _, err = rr.Read(tmp[:1]); err != nil {
		return err
	}
	j.Dimension = int8((uint8(tmp[0]) << 0))
	if _, err = rr.Read(tmp[:1]); err != nil {
		return err
	}
	j.Difficulty = (byte(tmp[0]) << 0)
	if _, err = rr.Read(tmp[:1]); err != nil {
		return err
	}
	j.MaxPlayers = (byte(tmp[0]) << 0)
	if j.LevelType, err = readString(rr); err != nil {
		return err
	}
	if j.ReducedDebugInfo, err = readBool(rr); err != nil {
		return err
	}
	return
}

func (s *ServerMessage) id() int { return 2 }
func (s *ServerMessage) write(ww *bytes.Buffer) (err error) {
	var tmp [1]byte
	var tmp0 []byte
	if tmp0, err = json.Marshal(&s.Message); err != nil {
		return
	}
	tmp1 := string(tmp0)
	if err = writeString(ww, tmp1); err != nil {
		return err
	}
	tmp[0] = byte(s.Type >> 0)
	if _, err = ww.Write(tmp[:1]); err != nil {
		return
	}
	return
}
func (s *ServerMessage) read(rr *bytes.Reader) (err error) {
	var tmp [1]byte
	var tmp0 string
	if tmp0, err = readString(rr); err != nil {
		return err
	}
	if err = json.Unmarshal([]byte(tmp0), &s.Message); err != nil {
		return err
	}
	if _, err = rr.Read(tmp[:1]); err != nil {
		return err
	}
	s.Type = (byte(tmp[0]) << 0)
	return
}

func (t *TimeUpdate) id() int { return 3 }
func (t *TimeUpdate) write(ww *bytes.Buffer) (err error) {
	var tmp [8]byte
	tmp[0] = byte(t.WorldAge >> 56)
	tmp[1] = byte(t.WorldAge >> 48)
	tmp[2] = byte(t.WorldAge >> 40)
	tmp[3] = byte(t.WorldAge >> 32)
	tmp[4] = byte(t.WorldAge >> 24)
	tmp[5] = byte(t.WorldAge >> 16)
	tmp[6] = byte(t.WorldAge >> 8)
	tmp[7] = byte(t.WorldAge >> 0)
	if _, err = ww.Write(tmp[:8]); err != nil {
		return
	}
	tmp[0] = byte(t.TimeOfDay >> 56)
	tmp[1] = byte(t.TimeOfDay >> 48)
	tmp[2] = byte(t.TimeOfDay >> 40)
	tmp[3] = byte(t.TimeOfDay >> 32)
	tmp[4] = byte(t.TimeOfDay >> 24)
	tmp[5] = byte(t.TimeOfDay >> 16)
	tmp[6] = byte(t.TimeOfDay >> 8)
	tmp[7] = byte(t.TimeOfDay >> 0)
	if _, err = ww.Write(tmp[:8]); err != nil {
		return
	}
	return
}
func (t *TimeUpdate) read(rr *bytes.Reader) (err error) {
	var tmp [8]byte
	if _, err = rr.Read(tmp[:8]); err != nil {
		return err
	}
	t.WorldAge = int64((uint64(tmp[7]) << 0) | (uint64(tmp[6]) << 8) | (uint64(tmp[5]) << 16) | (uint64(tmp[4]) << 24) | (uint64(tmp[3]) << 32) | (uint64(tmp[2]) << 40) | (uint64(tmp[1]) << 48) | (uint64(tmp[0]) << 56))
	if _, err = rr.Read(tmp[:8]); err != nil {
		return err
	}
	t.TimeOfDay = int64((uint64(tmp[7]) << 0) | (uint64(tmp[6]) << 8) | (uint64(tmp[5]) << 16) | (uint64(tmp[4]) << 24) | (uint64(tmp[3]) << 32) | (uint64(tmp[2]) << 40) | (uint64(tmp[1]) << 48) | (uint64(tmp[0]) << 56))
	return
}

func init() {
	packetCreator[Play][clientbound][0] = func() Packet { return &KeepAliveClientbound{} }
	packetCreator[Play][clientbound][1] = func() Packet { return &JoinGame{} }
	packetCreator[Play][clientbound][2] = func() Packet { return &ServerMessage{} }
	packetCreator[Play][clientbound][3] = func() Packet { return &TimeUpdate{} }
}
